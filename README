Web Authentication
==================

An example of stateful session based authentication, talking
between two different servers, Golang and any front-end.

Any stand-alone front-end can communicate with the Go server,
thanks to JavaScript.

This implementation will still be valid if you decided to only
deploy the user interface by just a simple templating language,
assuming you know what you're doing.

1) Database Mocking
-------------------

Why not use real database?

Because it is easier to just mock it, no need to install or setup
anything. The project is simple enough, you can just delete the
db/ folder and configure your own SQL/NoSQL database.

2) User Interface
-----------------

Front-end stuff is at folder www/ use any servers like:

    - Serve by Vercel <https://www.npmjs.com/package/serve>
    - Python HTTP Server <https://docs.python.org/3/library/http.server.html>

I happen to use Python's HTTP Server, to start the front-end
server:

    ./www/run.sh

It should be listening at port 8000.

Quick note on how this is possible: `fetch` will include the
cookies that was sent from the Go server and sets them onto the
browser's cookie. And from what I understand, you will always
need to specify the configuration `credentials: "include"`.

The fetch configuration mentioned above will then include the
cookie, otherwise if the configuration was not set to include, it
would not send the cookie back to the Go server.

You can play with this behaviour via www/js/ files.

3) Cookie Security
------------------

No cookie should be visible by JavaScript, you can always try
this:
    
    console.log(document.cookie)

4) Why not JWT
--------------

Because JWT is meant for authorization.

5) Contributing
---------------

I am more than happy to see if any description above got debunked
and someone found a security leak. Please, if any, open some
issues!
